
import { EventEmitter } from 'events';
import { Extension } from 'agora-rte-extension';
import type { IBaseProcessor } from 'agora-rte-extension';
import type { IExtension } from 'agora-rte-extension';
import { IProcessorContext } from 'agora-rte-extension';
import { VideoProcessor } from 'agora-rte-extension';

/**
 * Options of the beauty plugin. Used when calling {@link setOptions}.
 */
export declare type BeautyEffectOptions = {
    /**
     * The contrast level, often used in conjunction with lighteningLevel.
     *
     * 0: low contrast level
     * 1: (default) normal contrast level
     * 2: high contrast level
     */
    lighteningContrastLevel: 0 | 1 | 2;
    /**
     * The brightening level, in the range [0.0,1.0], where 0.0 means the original brightening. The default value is 0.6. The higher the value, the greater the brightening level.
     */
    lighteningLevel: Number;
    /**
     * The smoothness level, in the range [0.0,1.0], where 0.0 means the original smoothness. The default value is 0.5. The higher the value, the greater the smoothness level.
     */
    smoothnessLevel?: Number;
    /**
     * The sharpness level, in the range [0.0,1.0], where 0.0 means the original sharpness. The default value is 0.3. The higher the value, the greater the sharpness level.
     */
    sharpnessLevel?: Number;
    /**
     * The redness level, in the range [0.0,1.0], where 0.0 means the original redness. The default value is 0.1. The higher the value, the greater the redness level.
     */
    rednessLevel?: Number;
};

declare class BeautyExtension extends Extension<BeautyProcessor> implements IBeautyExtension {
    constructor();
    protected _createProcessor(): BeautyProcessor;
}
export default BeautyExtension;

declare class BeautyProcessor extends VideoProcessor implements IBeautyProcessor {
    name: string;
    private beautyWorker;
    private processed_track;
    eventBus: EventEmitter;
    private analyzer;
    onoverload?: () => void;
    private piped;
    private pipeFirst;
    private avgCost;
    private stats;
    constructor();
    private init;
    private trySetOption;
    setOptions(options: BeautyEffectOptions): void;
    private getStats;
    protected onEnableChange(enabled: boolean): Promise<void>;
    protected onPiped(context: IProcessorContext): void;
    protected onUnpiped(): void;
    protected onTrack(inputTrack: MediaStreamTrack, context: IProcessorContext): Promise<void>;
}

export declare type IBeautyExtension = IExtension<IBeautyProcessor>;

export declare interface IBeautyProcessor extends IBaseProcessor {
    setOptions(options: BeautyEffectOptions): void;
    onoverload?: () => void;
}

export { }
